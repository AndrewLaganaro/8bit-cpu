;--- computes prime numbers ---
ldai 3
sta prime_counter
j main

prime_counter: 0

main:
mvsa ; stack allocation
subi 1
mvas
lda prime_counter ;load value in A register
jal is_prime ;call subroutine
subi 0
lda prime_counter
bez continue ;if the result is 0 do not print value
out
continue:
addi 2
bcf end
sta prime_counter
mvsa
addi 1
mvas
j main
end: hlt

; --- is_prime ---
is_prime_counter: 0
is_prime_argument: 0
is_prime:
sta is_prime_argument
;optimization -> divisions start from half
slr
sta is_prime_counter
subi 1
bez is_prime_true
; main loop
is_prime_loop:
mvsa ;allocate stack
subi 1
mvas
lda is_prime_argument
ldb is_prime_counter
jal reminder
subi 0
bez is_prime_false
mvsa
addi 1
mvas
lda is_prime_counter
subi 2 ;counter decrement + ;if counter == 1 -> prime
bez is_prime_true
addi 1 ;restore good counter
sta is_prime_counter
j is_prime_loop

is_prime_true: ldai 1
jsp
is_prime_false:
mvsa
addi 1
mvas
ldai 0
jsp

;--- get division reminder ---
rem_tmp: 0
rem_divisor: 0
rem_sign: 0
reminder:
sta rem_tmp ;argument 1, will be decremented
stb rem_divisor; argument 2
;store undefined current sign
ldai 2
sta rem_sign
lda rem_divisor
subi 0
bez rem_return_zero
;--mainloop--
rem_loop:
lda rem_tmp
ldb rem_divisor
sub ;subtract the divisor and check if zero
bez rem_return_zero
sta rem_tmp
;check if the sign is positive.
;if sign is positive we'll check when goes negative and return.
;TODO need optimization setting just once
andi 128
bez rem_set_sign
;sign is not positive, check against old sign
ldb rem_sign
sub
bez rem_return ;sign went negative, returning.
j rem_loop
rem_return: ;we're done! reminder is negative, make positive and return
ldai 0
ldb rem_tmp
sub
rem_return_zero:
jsp
rem_set_sign:
ldai 128 ;set sign to 1, when we compare and it changes we're done.
sta rem_sign
j rem_loop
