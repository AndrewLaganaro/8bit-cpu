;--- recursive factorial ---
ldai 0
j main

main:
stasp ; saving counter onto the stack
subi 6 ; maximum value
bez end
ldasp ; restore counter value
mvab ; allocating stack for calls
mvsa
mvbs
subi 1
mvsb
mvas
mvba
jal factorial ; computing fact(counter)
out
mvsa ; de-allocating stack
addi 1
mvas
ldasp ; retrieving counter and increment
addi 1
j main
end: hlt

;--- recursive fibonacci ---
factorial:
mvab ; allocating parameter to stack
mvsa
mvbs
subi 1
mvsb
mvas
mvba
stasp ;saving original number onto the stack for further calls
;base cases
subi 0 ; == 0
bez fact_base_ret
subi 1 ; == 1
bez fact_base_ret
mvab ; allocating stack for fact(n-1)
mvsa
mvbs
subi 1
mvsb
mvas
mvba
jal factorial ; fact(n-1) recursive call
mvab ; de-allocating stack
mvsa
mvbs
addi 1
mvsb
mvas
ldasp ; retrieving original value
jal mul ; x * fact(x-1)
mvab ; de-allocating stack
mvsa
mvbs
addi 1
mvsb
mvas
mvba
jsp ; returning result
fact_base_ret:
mvsa
addi 1
mvas
ldai 1
jsp


;--- multiplication subroutine---
mul_op_a: 0
mul_op_b: 0
mul_tmp: 0
mul: sta mul_op_a
stb mul_op_b
ldai 0
sta mul_tmp
loop: lda mul_op_a
subi 0
bez end_mul
subi 1
sta mul_op_a
lda mul_op_b
ldb mul_tmp
add
sta mul_tmp
j loop
end_mul: lda mul_tmp
jsp
