;--- recursive fibonacci ---
ldai 0
j main

main:
stasp ; saving counter onto the stack
subi 14 ; maximum value
bez end
ldasp ; restore counter value
mvab ; allocating stack for calls
mvsa
mvbs
subi 1
mvsb
mvas
mvba
jal fibonacci ; computing fib(counter)
out
mvsa ; de-allocating stack
addi 1
mvas
ldasp ; retrieving counter and increment
addi 1
j main
end: hlt

;--- recursive fibonacci ---
fibonacci:
mvab ; allocating parameter to stack
mvsa
mvbs
subi 1
mvsb
mvas
mvba
stasp ;saving original number onto the stack for further calls
;base cases
subi 0 ; == 0
bez fib_base_ret0
subi 1 ; == 1
bez fib_base_ret
subi 1 ; == 2
bez fib_base_ret
addi 1 ; restore original value -1 for subroutine call
mvab ; allocating stack for fib(n-1)
mvsa
mvbs
subi 1
mvsb
mvas
mvba
jal fibonacci ; fib(n-1) recursive call
mvab ; de-allocating stack
mvsa
mvbs
addi 1
mvsb
mvas
ldasp ; retrieving original value for next call
stbsp ;saving fib(n-1) onto stack
mvab ; allocating stack for fib(n-2)
mvsa
mvbs
subi 1
mvsb
mvas
mvba
subi 2
jal fibonacci ; fib(n-2) recursive call
mvab ; de-allocating stack
mvsa
mvbs
addi 1
mvsb
mvas
ldasp ; retrieving fib(n-1)
add ; fib(n-1) + fib(n-2)
mvab ; de-allocating stack
mvsa
mvbs
addi 1
mvsb
mvas
mvba
jsp ; returning sum
fib_base_ret0:
mvsa
addi 1
mvas
ldai 0
jsp
fib_base_ret:
mvsa
addi 1
mvas
ldai 1
jsp
